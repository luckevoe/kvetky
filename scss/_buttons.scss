// scss-lint:disable QualifyingElement

//
// Base styles
//

.btn {
  display: inline-block;
  font-weight: $btn-font-weight;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: $input-btn-border-width solid transparent;
  @include button-size($input-btn-padding-y, $input-btn-padding-x, $font-size-base, $input-btn-line-height, $btn-border-radius);
  @include transition($btn-transition);

  // Share hover and focus styles
  @include hover-focus {
    text-decoration: none;
  }
  &:focus,
  &.focus {
    outline: 0;
    box-shadow: $btn-focus-box-shadow;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    opacity: .65;
    @include box-shadow(none);
  }

  &:active,
  &.active {
    background-image: none;
    @include box-shadow($btn-focus-box-shadow, $btn-active-box-shadow);
  }
}

// Future-proof disabling of clicks on `<a>` elements
a.btn.disabled,
fieldset[disabled] a.btn {
  pointer-events: none;
}


//
// Alternate buttons
//

@each $color, $value in $theme-colors {
  .btn-#{$color} {
    @include button-variant($value, $value);
  }
}

@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @if $color == "light" {
      @include button-outline-variant($value, $gray-900);
    } @else {
      @include button-outline-variant($value, $white);
    }
  }
}


//
// Link buttons
//

// Make a button look and behave like a link
.btn-link {
  font-weight: $font-weight-normal;
  color: $link-color;
  background-color: transparent;
  border-radius: 0;

  @include hover {
    color: $link-hover-color;
    text-decoration: $link-hover-decoration;
    background-color: transparent;
    border-color: transparent;
  }

  &:focus,
  &.focus {
    border-color: transparent;
    box-shadow: none;
  }

  &:disabled,
  &.disabled {
    color: $btn-link-disabled-color;
  }

  // No need for an active state here
}


//
// Button Sizes
//

.btn-lg {
  @include button-size($input-btn-padding-y-lg, $input-btn-padding-x-lg, $font-size-lg, $input-btn-line-height-lg, $btn-border-radius-lg);
}

.btn-sm {
  @include button-size($input-btn-padding-y-sm, $input-btn-padding-x-sm, $font-size-sm, $input-btn-line-height-sm, $btn-border-radius-sm);
}


//
// Block button
//

.btn-block {
  display: block;
  width: 100%;
}

// Vertically space out multiple block buttons
.btn-block + .btn-block {
  margin-top: $btn-block-spacing-y;
}

// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.btn-block {
    width: 100%;
  }
}

.btn-reservation {
  width: 220px;
  height: 65px;
  line-height: 2.2;
  color: #fff;
  text-align: left;
  background-color: #86b535;
  border-color: #fff;
  border-radius: 30px;
}

.btn-reservation:hover {
  color: #fff;
  border: 1px solid #fff;
  box-shadow: 0 0 0 0 rgba(0,0,0,.65);
  opacity: .98;
}

.btn-call {
  width: 220px;
  height: 65px;
  margin: 0 0 0 15px;
  line-height: 2.2;
  color: #fff;
  text-align: center;
  border-color: #fff;
  border-radius: 30px;
}

.btn-call:hover {
  color: #fff;
  border: 1px solid #fff;
  box-shadow: 0 0 0 0 rgba(0,0,0,.65);
  opacity: .8;
}

.btn-call_green {
  width: 220px;
  height: 65px;
  margin: 0 0 0 15px;
  line-height: 2.2;
  color: #86b535;
  text-align: center;
  border-color: #86b535;
  border-radius: 30px;
}

.btn-call_green:hover {
  color: #86b535;
  border: 1px solid #86b535;
  box-shadow: 0 0 0 0 rgba(0,0,0,.65);
  opacity: .8;
}

.btn-lang {
  width: 74px;
  height: 24px;
  margin: 0 0 0 15px;
  line-height: .2;
  color: #fff;
  background-color: #3f3f3f;
  border: 0;
}

.btn-lang:hover {
  color: #fff;
  border: 0;
  opacity: .9;
}

.buttuns_main {
  position: absolute;
  top: 480px;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
}

.buttuns_slide {
  position: absolute;
  top: 620px;
  z-index: 2;
  display: flex;
  align-items: center;
  justify-content: center;
}

.buttuns_main__green {
  top: 150px;
  z-index: 3;
  text-align: center;
}

